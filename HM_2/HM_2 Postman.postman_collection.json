{
	"info": {
		"_postman_id": "1e99e7ef-7983-40c2-9848-05b1243d79c4",
		"name": "HM_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16212920"
	},
	"item": [
		{
			"name": "Get",
			"item": [
				{
					"name": "/first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Проверить, что в body приходит правильный string.\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Vanja",
									"type": "text"
								},
								{
									"key": "age",
									"value": "29",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1300",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ip port}}/first",
							"host": [
								"{{ip port}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "/object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статут код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Спарсить response body в json.\r",
									"let resp = pm.response.json();\r",
									"//Спарсить request.\r",
									"let req = request.data\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"let resp_name = resp.name\r",
									"let req_name = req.name\r",
									"console.log (\"Resp_name = \" + resp_name)\r",
									"console.log (\"Req_name = \" + req_name)\r",
									"pm.test(\"Check name\", function () {\r",
									"        pm.expect(req_name).to.eql(resp_name);\r",
									"});\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"let resp_age = resp.age\r",
									"let req_age = req.age\r",
									"console.log (\"Resp_age = \" + resp_age)\r",
									"console.log (\"Req_age = \" + req_age)\r",
									"pm.test(\"Check age\", function () {\r",
									"        pm.expect(req_age).to.eql(resp_age);\r",
									"});\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"let resp_salary = +resp.salary\r",
									"let req_salary = +req.salary\r",
									"console.log (\"Resp_salary = \" + resp_salary)\r",
									"console.log (\"Req_salary = \" + req_salary)\r",
									"\r",
									"pm.test(\"Check salary\", function () {\r",
									"        pm.expect(req_salary).to.eql(resp_salary);\r",
									"});\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(\"family = \" + JSON.stringify(resp.family))\r",
									"//Проверить, что у параметра dog есть параметры name.\r",
									"let resp_dog = resp.family.pets.dog\r",
									"pm.test(\"Have_Dog_name?\", function () {\r",
									"    pm.expect(resp_dog).to.have.property(\"name\");\r",
									"});\r",
									"//Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Have_Dog_age?\", function () {\r",
									"    pm.expect(resp_dog).to.have.property(\"age\");\r",
									"});\r",
									"//Проверить, что параметр name имеет значение Luky.\r",
									"let resp_dog_name = resp.family.pets.dog.name\r",
									"pm.test(\"Luky?\", function () {\r",
									"    pm.expect(resp_dog_name).to.include(\"Luky\");\r",
									"});\r",
									"//Проверить, что параметр age имеет значение 4.\r",
									"let resp_dog_age = resp.family.pets.dog.age\r",
									"pm.test(\"Age?\", function () {\r",
									"    pm.expect(resp_dog_age).to.equal(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Ivan",
									"type": "text"
								},
								{
									"key": "age",
									"value": "29",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1300",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ip port}}/object_info_3?name=Ivan&age=29&salary=1300",
							"host": [
								"{{ip port}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Ivan"
								},
								{
									"key": "age",
									"value": "29"
								},
								{
									"key": "salary",
									"value": "1300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Спарсить response body в json.\r",
									"let resp = pm.response.json();\r",
									"//Спарсить request.\r",
									"let req = request.data\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"let resp_name = resp.name\r",
									"let req_name = req.name\r",
									"console.log (\"Resp_name = \" + resp_name)\r",
									"console.log (\"Req_name = \" + req_name)\r",
									"pm.test(\"Check name\", function () {\r",
									"        pm.expect(req_name).to.eql(resp_name);\r",
									"});\r",
									"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"let resp_age = +resp.age\r",
									"let req_age = +req.age\r",
									"console.log (\"Resp_age = \" + resp_age)\r",
									"console.log (\"Req_age = \" + req_age)\r",
									"pm.test(\"Check age\", function () {\r",
									"        pm.expect(resp_age).to.eql(req_age);\r",
									"});\r",
									"//Вывести в консоль параметр salary из request.\r",
									"console.log(\"salary = \" + req.salary)\r",
									"//Вывести в консоль параметр salary из response.\r",
									"console.log(\"salary_resp = \" + resp.salary)\r",
									"//Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(\"0_number = \" + resp.salary[0])\r",
									"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(\"1_number = \" + resp.salary[1])\r",
									"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(\"2_number = \" + resp.salary[2])\r",
									"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"let resp_salary_0 = +resp.salary[0]\r",
									"let req_salary_0 = +req.salary\r",
									"pm.test(\"Check salary 0\", function () {\r",
									"        pm.expect(req_salary_0).to.eql(resp_salary_0);\r",
									"});\r",
									"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"let resp_salary_1 = +resp.salary[1]\r",
									"let req_salary_1 = +req.salary\r",
									"pm.test(\"Check salary 1\", function () {\r",
									"        pm.expect(req_salary_1*2).to.eql(resp_salary_1);\r",
									"});\r",
									"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"let resp_salary_2 = +resp.salary[2]\r",
									"let req_salary_2 = +req.salary\r",
									"pm.test(\"Check salary 2\", function () {\r",
									"        pm.expect(req_salary_2*3).to.eql(resp_salary_2);\r",
									"});\r",
									"//Создать в окружении переменную name\r",
									"//Создать в окружении переменную age\r",
									"//Создать в окружении переменную salary\r",
									"//Передать в окружение переменную name\r",
									"pm.environment.set(\"name\", \"Ivan\");\r",
									"//Передать в окружение переменную age\r",
									"pm.environment.set(\"age\", 29);\r",
									"//Передать в окружение переменную salary\r",
									"pm.environment.set(\"salary\", 1300);\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"resp.salary.forEach(element=>console.log(+element));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Ivan",
									"type": "text"
								},
								{
									"key": "age",
									"value": "29",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1300",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ip port}}/object_info_4?name=Ivan&age=29&salary=1300",
							"host": [
								"{{ip port}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Ivan"
								},
								{
									"key": "age",
									"value": "29"
								},
								{
									"key": "salary",
									"value": "1300"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "/user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Проверка статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Спарсить response body в json.\r",
									"let resp = pm.response.json();\r",
									"//Спарсить request. \r",
									"let req = request.data\r",
									"//Проверка name\r",
									"let resp_name = resp.name\r",
									"let req_name = req.name\r",
									"console.log (\"Resp_name = \" + resp_name)\r",
									"console.log (\"Req_name = \" + req_name)\r",
									"pm.test(\"Check name\", function () {\r",
									"        pm.expect(resp_name).to.eql(\"Ivan\");\r",
									"});\r",
									"// Проверка age\r",
									"let resp_age = + resp.age\r",
									"let req_age = + req.age\r",
									"console.log (\"Resp_age = \" + resp_age)\r",
									"console.log (\"Req_age = \" + req_age)\r",
									"\r",
									"pm.test(\"Check age\", function () {\r",
									"        pm.expect(resp_age).to.eql(29);\r",
									"});\r",
									"//Проверка salary\r",
									"let resp_salary = + resp.salary\r",
									"let req_salary = + req.salary\r",
									"console.log (\"Resp_salary = \" + resp_salary)\r",
									"console.log (\"Req_salary = \" + req_salary)\r",
									"pm.test(\"Check salary\", function () {\r",
									"        pm.expect(resp_salary).to.eql(1300);\r",
									"});\r",
									"//Проверить, что name в ответе равно name s reques (name забрать из request.)\r",
									"let resp_name_1 = resp.name\r",
									"let req_name_1 = req.name\r",
									"console.log (\"Resp_name_1 = \" + resp_name_1)\r",
									"console.log (\"Req_name_1 = \" + req_name_1)\r",
									"pm.test(\"Check name_1\", function () {\r",
									"        pm.expect(resp_name_1).to.eql(req_name_1);\r",
									"});\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"let resp_age_1 = + resp.age\r",
									"let req_age_1 = + req.age\r",
									"console.log (\"Resp_age_1 = \" + resp_age_1)\r",
									"console.log (\"Req_age_1 = \" + req_age_1)\r",
									"pm.test(\"Check age_1\", function () {\r",
									"        pm.expect(resp_age_1).to.eql(req_age_1);\r",
									"});\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"let resp_salary_1 = + resp.salary\r",
									"let req_salary_1 = + req.salary\r",
									"console.log (\"Resp_salary_1 = \" + resp_salary_1)\r",
									"console.log (\"Req_salary_1 = \" + req_salary_1)\r",
									"pm.test(\"Check salary_1\", function () {\r",
									"        pm.expect(resp_salary_1).to.eql(req_salary_1);\r",
									"});\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(\"family = \" + JSON.stringify(resp.family))\r",
									" //Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									" let resp_1_5_salary = +resp.family.u_salary_1_5_year\r",
									" pm.test(\"Check salary_1_5\", function () {\r",
									"        pm.expect(req_salary*4).to.eql(resp_1_5_salary);\r",
									"        console.log (\"Salary1_5 = \" + resp_1_5_salary)\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Ivan",
									"type": "text"
								},
								{
									"key": "age",
									"value": "29",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1300",
									"type": "text"
								},
								{
									"key": "family",
									"value": "Kate, jen",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{ip port}}/user_info_3",
							"host": [
								"{{ip port}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Вставить параметр salary из окружения в request\r",
									"//Вставить параметр age из окружения в age\r",
									"//Вставить параметр name из окружения в name\r",
									"//Отправить запрос.\r",
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Спарсить response body в json.\r",
									"let resp = pm.response.json();\r",
									"//Спарсить request.\r",
									"let req = request.data\r",
									"//Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"Have_start_qa_salary?\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"Have_qa_salary_after_6_months?\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"Have_qa_salary_after_12_months?)\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"Have_qa_salary_after_1.5_year?)\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"Have_qa_salary_after_3.5_year?)\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_year\");\r",
									"});\r",
									"//Проверить, что json response имеет параметр person\r",
									"pm.test(\"Have_person?)\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"person\");\r",
									"});\r",
									"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"let req_salary = +req.salary\r",
									"let start_qa_salary = +resp.start_qa_salary\r",
									"pm.test(\"Check salary\", function () {\r",
									"        pm.expect(req_salary).to.eql(start_qa_salary);\r",
									"});\r",
									"console.log(\"start = \" + start_qa_salary)\r",
									"console.log(\"req_salary = \" + req_salary)\r",
									"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"let qa_salary_after_6_months = + resp.qa_salary_after_6_months\r",
									"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
									"        pm.expect(req_salary*2).to.eql(qa_salary_after_6_months);\r",
									"});\r",
									"console.log(\"start = \" + qa_salary_after_6_months)\r",
									"console.log(\"req_salary = \" + req_salary*2)\r",
									"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"let qa_salary_after_12_months = + resp.qa_salary_after_12_months\r",
									"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
									"        pm.expect(req_salary*2.7).to.eql(qa_salary_after_12_months);\r",
									"});\r",
									"console.log(\"start = \" + qa_salary_after_12_months)\r",
									"console.log(\"req_salary = \" + req_salary*2.7)\r",
									"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"let qa_salary_after_1_5_year = resp[\"qa_salary_after_1.5_year\"]\r",
									"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
									"        pm.expect(req_salary*3.3).to.eql(qa_salary_after_1_5_year);\r",
									"});\r",
									"console.log(\"start1 = \" + qa_salary_after_1_5_year)\r",
									"console.log(\"req_salary1 = \" + req_salary*3.3)\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"let qa_salary_after_3_5_years = resp[\"qa_salary_after_3.5_years\"]\r",
									"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
									"        pm.expect(req_salary*3.8).to.eql(qa_salary_after_3_5_years);\r",
									"});\r",
									"console.log(\"start2 = \" + qa_salary_after_3_5_years)\r",
									"console.log(\"req_salary2 = \" + req_salary*3.8)\r",
									"\r",
									"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"let name = resp.person.u_name[1]\r",
									"pm.test(\"Check esp.person.u_name\", function () {\r",
									"        pm.expect(req_salary).to.eql(name);\r",
									"});\r",
									"console.log(\"name = \" + name, \"salary = \" + req_salary)\r",
									"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"let age = +resp.person.u_age\r",
									"let req_age = +req.age\r",
									"pm.test(\"Check esp.person.u_name\", function () {\r",
									"        pm.expect(req_age).to.eql(age);\r",
									"});\r",
									"console.log(\"age = \" + age, \"req_age = \" + req_age)\r",
									"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"let u_salary_5_years = + resp.person.u_salary_5_years\r",
									"pm.test(\"Check a_salary_after_12_months\", function () {\r",
									"        pm.expect(req_salary*4.2).to.eql(u_salary_5_years);\r",
									"});\r",
									"console.log(\"start = \" + u_salary_5_years, \"req_salary = \" + req_salary*4.2)\r",
									"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"let person = resp.person\r",
									"for (x in person){\r",
									"console.log(person[x])};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ip port}}/user_info_2",
							"host": [
								"{{ip port}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}